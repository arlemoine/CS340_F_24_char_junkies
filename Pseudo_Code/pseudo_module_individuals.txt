module_name = '<Individuals>'

'''
Version: <V1>

Description:
    <This module is to gather data for each individual officer, process the data, and create data frames using the collected data>

Authors:
    <Chris Smith>

Date Created     :  <11/12/24>
Date Last Updated:  <11/12/24>

#%%IMPORTS

from matplotlib import pyplot as plt
import numpy  as np 
import pandas as pd


#%%Declorations
#Class definitions Start Here

class FitnessData:
    """
    Parent class for managing fitness data of an individual.
    """
    
    def __init__(self, name, age, steps_data, hrv_data):
        """
        Initialize the FitnessData object with personal and fitness data.
        """
        self.person_name = name  # Store the person's name #
        self.person_age = age  # Store the person's age #
        self.df_steps = steps_data  # Create dataframe for steps #
        self.df_hrv = hrv_data  # Create dataframe for HRV #
        self.CONSTANTS = CONSTANTS  # Assign constants dictionary #
    
    def view_table(self, dataframe):
        """
        Display the dataframe as a table.
        """
        if dataframe is not None:
            print(dataframe.head())  # Display the first few rows of the dataframe #
        else:
            print("Dataframe is empty.")  # Print a message if the dataframe is empty #
    
    def view_line_graph(self, dataframe, column, title):
        """
        Plot a line graph for a specific column in the dataframe.
        """
        if dataframe is not None and column in dataframe.columns:
            dataframe.plot(y=column, kind='line', title=title)  # Plot the line graph #
        else:
            print("Column not found in the dataframe or dataframe is empty.")  # Print a message if the column is not found #
    
    def view_steps_table(self):
        """
        Display the steps dataframe as a table.
        """
        self.view_table(self.df_steps)  # Use the view_table method to display steps dataframe #
    
    def view_hrv_table(self):
        """
        Display the HRV dataframe as a table.
        """
        self.view_table(self.df_hrv)  # Use the view_table method to display HRV dataframe #
    
    def view_steps_line_graph(self):
        """
        Plot a line graph of steps data.
        """
        self.view_line_graph(self.df_steps, 'Steps', 'Steps Over Time')  # Plot line graph for steps #
    
    def view_hrv_line_graph(self):
        """
        Plot a line graph of HRV data.
        """
        self.view_line_graph(self.df_hrv, 'HRV', 'HRV Over Time')  # Plot line graph for HRV #


class FitnessDataProcessing(FitnessData):
    """
    Child class for processing and analyzing fitness data.
    """
    
    def __init__(self, name, age, steps_data, hrv_data, folder_name):
        """
        Initialize the FitnessDataProcessing object with additional attributes.
        """
        super().__init__(name, age, steps_data, hrv_data)  # Initialize parent class #
        self.fitness_score = None  # Initialize fitness score #
        self.avg_steps_per_day = None  # Initialize average steps per day #
        self.avg_hrv_per_day = None  # Initialize average HRV per day #
        self.folder_name = folder_name  # Store the folder name #
        self.df_average_hrv = pd.DataFrame()  # Create dataframe for average HRV with age correction #
    
    def import_csv(self, filename):
        """
        Import CSV files into dataframes.
        """
        try:
            df = pd.read_csv(filename)  # Read the CSV file into a dataframe #
            print(f"Successfully imported {filename}")  # Print success message #
            return df  # Return the dataframe #
        except FileNotFoundError:
            print(f"File {filename} not found.")  # Print error message if file is not found #
            return None  # Return None if file is not found #
    
    def clean_data(self):
        """
        Remove bad HRV data when heart rate > max.
        """
        self.df_hrv = self.df_hrv[self.df_hrv['HeartRate'] <= self.CONSTANTS['MAX_HEART_RATE']]  # Filter out rows where heart rate exceeds the max #
    
    def calc_hrv(self):
        """
        Create dataframe for average HRV per day, age corrected.
        """
        if not self.df_hrv.empty:
            self.df_hrv['CorrectedHRV'] = self.df_hrv['HRV'] * (10 / self.person_age)  # Apply age correction to HRV #
            self.df_average_hrv = self.df_hrv.groupby('Date')['CorrectedHRV'].mean().reset_index()  # Calculate daily average HRV #
    
    def calc_step_score(self):
        """
        Calculate step score.
        """
        if not self.df_steps.empty:
            self.avg_steps_per_day = self.df_steps['Steps'].mean()  # Calculate average steps per day #
            step_score = self.avg_steps_per_day * self.CONSTANTS['STEPS_WEIGHT']  # Calculate step score based on weight #
            return step_score  # Return the step score #
    
    def calc_hrv_score(self):
        """
        Calculate HRV score.
        """
        if not self.df_average_hrv.empty:
            self.avg_hrv_per_day = self.df_average_hrv['CorrectedHRV'].mean()  # Calculate average HRV per day #
            hrv_score = self.avg_hrv_per_day * self.CONSTANTS['HRV_WEIGHT']  # Calculate HRV score based on weight #
            return hrv_score  # Return the HRV score #
    
    def calc_fitness_score(self):
        """
        Calculate fitness score.
        """
        step_score = self.calc_step_score()  # Get step score #
        hrv_score = self.calc_hrv_score()  # Get HRV score #
        if step_score is not None and hrv_score is not None:
            self.fitness_score = step_score + hrv_score  # Combine step and HRV scores for overall fitness score #
    
    def graph_hrv_per_day(self):
        """
        Graph HRV per day (whisker plot).
        """
        if not self.df_average_hrv.empty:
            self.df_average_hrv.boxplot(column='CorrectedHRV', by='Date')  # Create whisker plot for HRV per day #
    
    def graph_steps_per_day(self):
        """
        Graph steps per day (whisker plot).
        """
        if not self.df_steps.empty:
            self.df_steps.boxplot(column='Steps', by='Date')  # Create whisker plot for steps per day #
    
    def show_stats_for_month(self):
        """
        Show stats for the month:
        1) Average steps per day
        2) Average HRV per day
        3) Fitness score
        """
        print(f"Average Steps per Day: {self.avg_steps_per_day}")  # Print average steps per day #
        print(f"Average HRV per Day: {self.avg_hrv_per_day}")  # Print average HRV per day #
        print(f"Fitness Score: {self.fitness_score}")  # Print fitness score #


