#%% MODULE BEGINS
module_name = 'Department'

'''
Version: 1.0.0

Description:
    Module to consolidate fitness data for individuals into their department. Generates fitness statistics for the department based off of the individuals and produces relevant graphs.

Authors:
    Adriean Lemoine

Date Created     :  11/12/2024
Date Last Updated:  11/12/2024

#%% IMPORTS                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if __name__ == "__main__":
   import os
   #os.chdir("./../..")
#

#custom imports
from Constant.py import OUTPUT_FOLDER as OUTPUT_FOLDER

#other imports
from   copy       import deepcopy as dpcpy

'''
from   matplotlib import pyplot as plt
import mne
import numpy  as np 
import os
import pandas as pd
import pickle as pkl
import seaborn as sns
'''
#%% USER INTERFACE              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#%% CONSTANTS                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#%% CONFIGURATION               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#%% INITIALIZATIONS             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#%% DECLARATIONS                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#Global declarations Start Here



#Class definitions Start Here

class DepartmentData:
    individuals = <series from individual stats>
    daysInMonth = <int>
    deptSteps = <dataframe> # Steps per day average per individual
    deptHRV = <dataframe> # HRV average per individual
    deptFitnessScore = <dataframe> # Fitness score average per individual

    def __init__(self, departmentName):
        self.departmentName = departmentName
    #

    def addIndividual(self, individual): # Add person to group
        individuals.add(individual)
    #

    def dropIndividual(self, individual): # Remove person from group
        individuals.drop(individual)
    #

    def getSteps(self): # Generate dataframe for average steps per person
        names = []
        avgSteps = []

        for individual in individuals:
            names.append(individual.name)
            avgSteps.append(individual.avgSteps)

        self.deptSteps = pd.DataFrame({
            'Name': names,
            'avgSteps': avgSteps
        })
    #

    def getHRV(self): # Generate dataframe for average HRV per person
        names = []
        avgHRV = []

        for individual in individuals:
            names.append(individual.name)
            avgHRV.append(individual.avgHRV)

        self.deptHRV = pd.DataFrame({
            'Name': names,
            'avgHRV': avgHRV
        })
    #

    def getFitnessScores(self): # Generate dataframe for average HRV per person
        names = []
        avgFitnessScore = []

        for individual in individuals:
            names.append(individual.name)
            avgFitnessScore.append(individual.avgFitnessScore)

        self.deptFitnessScore = pd.DataFrame({
            'Name': names,
            'avgFitnessScore': avgFitnessScore
        })
    #
#



### CURRENTLY WORKING IN THIS SECTION. NEED TO FIX CONSTRUCTORS AND FINISH METHODS ###



class DepartmentDataProcessing(DepartmentData):
    OUTPUT_FOLDER = OUTPUT_FOLDER

    def __init__(self, fileName):
        self.fileName = fileName
    #

    def loadData(self): # Load from a pickle file
        with open(fileName, 'rb') as data:
            temp = pkl.load(data)
        #
        return temp
    #

    def saveData(self): # Save to a pickle file
        with open(fileName, 'wb') as data:
            pkl.dump(self, data)
        #
    #

    def calcStatsSteps(self): # Calculate statistical values such as mean, min, max
        self.
    #
#


#Function definitions Start Here
def main():
    pass
#

#%% MAIN CODE                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Main code start here



#%% SELF-RUN                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Main Self-run block
if __name__ == "__main__":
    
    print(f"\"{module_name}\" module begins.")
    
    #TEST Code
    main()
